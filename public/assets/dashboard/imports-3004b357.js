import{s as c,x as r}from"./index-d7ffff10.js";const h=c("imports",{state:()=>({imports:[]}),getters:{filterByDate:i=>(t,s)=>(t==null||t.setHours(0),t==null||t.setMinutes(0),t==null||t.setSeconds(0),s==null||s.setHours(0),s==null||s.setMinutes(0),s==null||s.setSeconds(0),i.imports.filter(e=>{const n=new Date(e.created_at);return n.setHours(0),n.setMinutes(0),n.setSeconds(0),!t&&!s?!t&&!s:s?n>=t&&n<=s:n>=t})),sumGroupByMonth:i=>{const t={};return i.imports.forEach(s=>{const e=`${new Date(s.created_at).getMonth()+1}/${new Date(s.created_at).getFullYear()}`;t[e]?t[e].push(s):t[e]=[s]}),Object.keys(t).forEach(s=>{const e=t[s];let n=0;e.forEach(p=>n+=parseInt(p.cost)),t[s]=n}),t}},actions:{async initialize(){const i=await r.get("imports");this.imports=i.data.imports},async refresh(){return this.initialize()},async create(i){const{user:t}=i;delete i.user;const s=await r.post("imports",i);this.imports.unshift({...s.data.import,user:t})},async delete(i){await r.delete(`imports/${i.id}`);const t=this.imports.findIndex(s=>s.id===i.id);this.imports.splice(t,1)},async update(i,t){await r.patch(`imports/${i}`,t),this.imports[this.imports.findIndex(s=>s.id==i)]={...this.imports[this.imports.findIndex(s=>s.id==i)],...t}}}});export{h as u};
